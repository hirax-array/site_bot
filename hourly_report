#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, division, unicode_literals

import time
from datetime import datetime, timedelta
import psutil
from subprocess import check_output, CalledProcessError

from slackclient import SlackClient
import pyowm
from astropy import coordinates as coords
from astropy import units
from astropy.time import Time

# Get API Tokens
from hirax_tokens import HIRAX_BOT_TOKEN, OWM_TOKEN

testing = False # If true output to bot_testing
messages = []
alerts = []

messages.append('*Hourly Status Report*')
messages.append(Time(datetime.utcnow(), scale='utc').iso[:-4]+' UTC')

HARTRAO_COORD = coords.EarthLocation.from_geodetic(
    lon=27.6853931*units.deg,
    lat=-25.8897515*units.deg,
    height=1415.710*units.m,
    ellipsoid='WGS84')

try:
    owm = pyowm.OWM(OWM_TOKEN)
    hartrao_weather = owm.weather_around_coords(
        HARTRAO_COORD.lat.degree,
        HARTRAO_COORD.lon.degree)[0].get_weather()
    messages.append('Current weather: {:s}, {:.0f}°C'.format(
        hartrao_weather.get_status(),
        hartrao_weather.get_temperature('celsius')['temp']))
except Exception:
    messages.append('*Weather Lookup failed*')

sun_alt = coords.get_sun(Time.now()).transform_to(
    coords.AltAz(location=HARTRAO_COORD)).alt.degree

messages.append('Sun Altitude: {:.0f}°'.format(sun_alt))

messages.append('Acquisition Scripts Status:')
proc_names = ['kotekan', 'ch_master.py']

for proc_name in proc_names:
    try:
        pid = check_output(['pgrep', '-f', proc_name]).splitlines()[0]
        proc = psutil.Process(int(pid))
        create_time = proc.create_time()
        uptime = str(timedelta(seconds=time.time() - create_time))
        uptime = uptime[:-9].replace(':', 'h ', 1).replace(':', 'm', 1)
        messages.append('`{:s}` is running, uptime: {:s}'.format(
            proc_name, uptime))
    except CalledProcessError:
        messages.append('`{:s}` is *not* running.'.format(
            proc_name))
        alerts.append('*Alert:* `{:s}` is not running.'.format(proc_name))

sc = SlackClient(HIRAX_BOT_TOKEN)
result = sc.api_call(
    "chat.postMessage",
    channel='#site_status_testing' if testing else '#site_status',
    text='\n'.join(messages),
    as_user=True,
)

print(result)

if len(alerts) > 0:
    sc.api_call(
        "chat.postMessage",
        channel='#site_alerts_testing' if testing else '#site_alerts',
        text='\n'.join(alerts),
        as_user=True,
    )


